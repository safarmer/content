plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.2"
    id("com.google.cloud.tools.jib") version "2.6.0"
}

version = "0.1"
group = "co.thatch.hub.svc.content"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("co.thatch.hub.svc.content.*")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.dekorate:kubernetes-annotations:${dekorateVersion}")
    annotationProcessor("io.dekorate:prometheus-annotations:${dekorateVersion}")
    annotationProcessor("io.dekorate:jaeger-annotations:${dekorateVersion}")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
    implementation("io.micronaut:micronaut-http-client")
    compileOnly("org.projectlombok:lombok")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-discovery-client")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-graphite")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-stackdriver")
    implementation("io.micronaut.liquibase:micronaut-liquibase")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.mongodb:micronaut-mongo-reactive")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.gcp:micronaut-gcp-tracing")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.dekorate:kubernetes-annotations:${dekorateVersion}")
    implementation("io.dekorate:prometheus-annotations:${dekorateVersion}")
    implementation("io.dekorate:jaeger-annotations:${dekorateVersion}")
    implementation("io.micronaut.r2dbc:micronaut-r2dbc-core")
    implementation("io.micronaut.r2dbc:micronaut-data-r2dbc")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("mysql:mysql-connector-java")
    runtimeOnly("dev.miku:r2dbc-mysql")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:r2dbc")
    testImplementation("org.testcontainers:mysql")
    testImplementation("org.testcontainers:mongodb")
}


application {
    mainClass.set("co.thatch.hub.svc.content.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("15")
    targetCompatibility = JavaVersion.toVersion("15")
}


    dockerBuild{
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    dockerBuildNative{
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    jib {
        to {
            image = "gcr.io/myapp/jib-image"
        }
    }
